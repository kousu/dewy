#!/usr/bin/env python
"""
Given an image file, find and extract all faces in it to separate .png files

Based on https://github.com/axelbellec/Facial-Recognition/
"""
from __future__ import print_function

import os

import numpy, cv2
import click


def classify_regions(img, classifier):
    cascade = cv2.CascadeClassifier(classifier)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    return cascade.detectMultiScale(
        gray, scaleFactor=1.3, minNeighbors=5)

def find_faces(img):
    return list(classify_regions(img, 'haarcascade/haarcascade_frontalface_default.xml'))\
           + list(classify_regions(img, 'haarcascade/haarcascade_profileface.xml'))

def find_eyes(img):
    return classify_regions(img, 'haarcascade/haarcascade_eye.xml')


@click.command()
@click.option('--eyes', help='Find eyes', type=bool)
@click.argument('img', type=click.Path(exists=True))
def main(img, eyes):
    classifier = find_faces if not eyes else find_eyes
    
    fname = img
    img = cv2.imread(img)
    faces = classifier(img)

    #for (x, y, w, h) in faces:
    #    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
    #cv2.imwrite('out.png', img)

    # FIXME: super inefficient!
    faces_img = [img[y:y+h, x:x+w] for (x,y,w,h) in faces]
    for i, f_img in enumerate(faces_img, 1):
        outfile = os.path.basename(fname)+'_face%02d.png' % i
        cv2.imwrite(outfile, f_img)
        print(outfile)


if __name__ == '__main__':
    main()
